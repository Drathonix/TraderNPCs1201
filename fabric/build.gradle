import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"

    id 'com.matthewprenger.cursegradle'
    id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

def ENV = System.getenv();

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    // Taterzens
    // We need this for profession API
    modImplementation("com.github.samolego.Taterzens:taterzens-fabric:${project.taterzens}")
    modImplementation("eu.pb4.sgui:sgui:1.2.2")
    //compileOnly(fileTree(dir: 'lib', include: ['*']))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "taterzens", project.taterzens

    filesMatching("fabric.mod.json") {
        expand("version": project.version, "taterzens": project.taterzens)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


// from FAPI https://github.com/FabricMC/fabric/blob/1.16/build.gradle
curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = "550916"
        changelog = ENV.CHANGELOG ?: "A changelog can be found at https://github.com/samolego/TraderNPCs/releases/tag/${version}"
        releaseType = "release"
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}-fabric.jar")) {
            displayName = "[${project.minecraft_version}] TraderNPCs ${version} [Fabric]"
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

task modrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "78ZQG4Et"
    versionNumber = project.minecraft_version + "+" + version + "-fabric"
    changelog = ENV.CHANGELOG ?: "A changelog can be found at https://github.com/samolego/TraderNPCs/releases/tag/${version}"
    versionName = "[${project.minecraft_version}] TraderNPCs ${version} [Fabric]"
    releaseType = "release"

    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}-fabric.jar")

    addGameVersion("${project.minecraft_version}")
    addLoader('fabric')
}
